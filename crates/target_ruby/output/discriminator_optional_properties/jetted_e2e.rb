# Code generated by jetted for Ruby v0.1.0

require 'json'
require 'time'

module JettedE2E

  class DiscriminatorOptionalProperties
    attr_accessor :foo

    def self.from_json_data(data)
      {
        "bar" => DiscriminatorOptionalPropertiesBar,
      }[data["foo"]].from_json_data(data)
    end
  end

  class DiscriminatorOptionalPropertiesBar < DiscriminatorOptionalProperties
    attr_accessor :baz
    attr_accessor :quux

    def self.from_json_data(data)
      out = DiscriminatorOptionalPropertiesBar.new
      out.foo = "bar"
      out.baz = JettedE2E::from_json_data(Array[String], data["baz"])
      out.quux = JettedE2E::from_json_data(TrueClass, data["quux"])
      out
    end

    def to_json_data
      data = { "foo" => "bar" }
      data["baz"] = JettedE2E::to_json_data(baz) unless baz.nil?
      data["quux"] = JettedE2E::to_json_data(quux) unless quux.nil?
      data
    end
  end

  private

  def self.from_json_data(type, data)
    if data.nil? || [Object, TrueClass, Integer, Float, String].include?(type)
      data
    elsif type == DateTime
      DateTime.rfc3339(data)
    elsif type.is_a?(Array)
      data.map { |elem| from_json_data(type.first, elem) }
    elsif type.is_a?(Hash)
      data.transform_values { |elem| from_json_data(type.values.first, elem) }
    else
      type.from_json_data(data)
    end
  end

  def self.to_json_data(data)
    if data.nil? || [TrueClass, FalseClass, Integer, Float, String].include?(data.class)
      data
    elsif data.is_a?(DateTime)
      data.rfc3339
    elsif data.is_a?(Array)
      data.map { |elem| to_json_data(elem) }
    elsif data.is_a?(Hash)
      data.transform_values { |elem| to_json_data(elem) }
    else
      data.to_json_data
    end
  end
end
