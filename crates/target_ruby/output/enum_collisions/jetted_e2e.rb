# Code generated by jetted for Ruby v0.1.0

require 'json'
require 'time'

module JettedE2E

  class EnumCollisionsFooBar
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    X = new("x")
    Y = new("y")

    def self.from_json_data(data)
      {
        "x" => X,
        "y" => Y,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class EnumCollisionsFoo
    attr_accessor :bar

    def self.from_json_data(data)
      out = EnumCollisionsFoo.new
      out.bar = JettedE2E::from_json_data(EnumCollisionsFooBar, data["bar"])
      out
    end

    def to_json_data
      data = {}
      data["bar"] = JettedE2E::to_json_data(bar)
      data
    end
  end

  class EnumCollisionsFooBar0
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    X = new("x")
    Y = new("y")

    def self.from_json_data(data)
      {
        "x" => X,
        "y" => Y,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class EnumCollisions
    attr_accessor :foo
    attr_accessor :foo_bar

    def self.from_json_data(data)
      out = EnumCollisions.new
      out.foo = JettedE2E::from_json_data(EnumCollisionsFoo, data["foo"])
      out.foo_bar = JettedE2E::from_json_data(EnumCollisionsFooBar0, data["foo_bar"])
      out
    end

    def to_json_data
      data = {}
      data["foo"] = JettedE2E::to_json_data(foo)
      data["foo_bar"] = JettedE2E::to_json_data(foo_bar)
      data
    end
  end

  private

  def self.from_json_data(type, data)
    if data.nil? || [Object, TrueClass, Integer, Float, String].include?(type)
      data
    elsif type == DateTime
      DateTime.rfc3339(data)
    elsif type.is_a?(Array)
      data.map { |elem| from_json_data(type.first, elem) }
    elsif type.is_a?(Hash)
      data.transform_values { |elem| from_json_data(type.values.first, elem) }
    else
      type.from_json_data(data)
    end
  end

  def self.to_json_data(data)
    if data.nil? || [TrueClass, FalseClass, Integer, Float, String].include?(data.class)
      data
    elsif data.is_a?(DateTime)
      data.rfc3339
    elsif data.is_a?(Array)
      data.map { |elem| to_json_data(elem) }
    elsif data.is_a?(Hash)
      data.transform_values { |elem| to_json_data(elem) }
    else
      data.to_json_data
    end
  end
end
