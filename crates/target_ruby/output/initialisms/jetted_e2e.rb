# Code generated by jetted for Ruby v0.1.0

require 'json'
require 'time'

module JettedE2E

  class InitialismsNestedIDInitialism
    attr_accessor :json
    attr_accessor :normalword

    def self.from_json_data(data)
      out = InitialismsNestedIDInitialism.new
      out.json = JettedE2E::from_json_data(String, data["json"])
      out.normalword = JettedE2E::from_json_data(String, data["normalword"])
      out
    end

    def to_json_data
      data = {}
      data["json"] = JettedE2E::to_json_data(json)
      data["normalword"] = JettedE2E::to_json_data(normalword)
      data
    end
  end

  class Initialisms
    attr_accessor :http
    attr_accessor :id
    attr_accessor :nested_id_initialism
    attr_accessor :utf8
    attr_accessor :word_with_embedded_id_initialism
    attr_accessor :word_with_trailing_initialism_id

    def self.from_json_data(data)
      out = Initialisms.new
      out.http = JettedE2E::from_json_data(String, data["http"])
      out.id = JettedE2E::from_json_data(String, data["id"])
      out.nested_id_initialism = JettedE2E::from_json_data(InitialismsNestedIDInitialism, data["nested_id_initialism"])
      out.utf8 = JettedE2E::from_json_data(String, data["utf8"])
      out.word_with_embedded_id_initialism = JettedE2E::from_json_data(String, data["word_with_embedded_id_initialism"])
      out.word_with_trailing_initialism_id = JettedE2E::from_json_data(String, data["word_with_trailing_initialism_id"])
      out
    end

    def to_json_data
      data = {}
      data["http"] = JettedE2E::to_json_data(http)
      data["id"] = JettedE2E::to_json_data(id)
      data["nested_id_initialism"] = JettedE2E::to_json_data(nested_id_initialism)
      data["utf8"] = JettedE2E::to_json_data(utf8)
      data["word_with_embedded_id_initialism"] = JettedE2E::to_json_data(word_with_embedded_id_initialism)
      data["word_with_trailing_initialism_id"] = JettedE2E::to_json_data(word_with_trailing_initialism_id)
      data
    end
  end

  private

  def self.from_json_data(type, data)
    if data.nil? || [Object, TrueClass, Integer, Float, String].include?(type)
      data
    elsif type == DateTime
      DateTime.rfc3339(data)
    elsif type.is_a?(Array)
      data.map { |elem| from_json_data(type.first, elem) }
    elsif type.is_a?(Hash)
      data.transform_values { |elem| from_json_data(type.values.first, elem) }
    else
      type.from_json_data(data)
    end
  end

  def self.to_json_data(data)
    if data.nil? || [TrueClass, FalseClass, Integer, Float, String].include?(data.class)
      data
    elsif data.is_a?(DateTime)
      data.rfc3339
    elsif data.is_a?(Array)
      data.map { |elem| to_json_data(elem) }
    elsif data.is_a?(Hash)
      data.transform_values { |elem| to_json_data(elem) }
    else
      data.to_json_data
    end
  end
end
