// Code generated by jetted for C# + System.Text.Json v0.1.0

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JettedE2E
{
    [JsonConverter(typeof(EnumVariantCollisionsJsonConverter))]
    public enum EnumVariantCollisions
    {
        Foo,

        Foo0,

        Foo1,
    }
    public class EnumVariantCollisionsJsonConverter : JsonConverter<EnumVariantCollisions>
    {
        public override EnumVariantCollisions Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "FOO":
                    return EnumVariantCollisions.Foo;
                case "Foo":
                    return EnumVariantCollisions.Foo0;
                case "foo":
                    return EnumVariantCollisions.Foo1;
                default:
                    throw new ArgumentException(String.Format("Bad EnumVariantCollisions value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, EnumVariantCollisions value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case EnumVariantCollisions.Foo:
                    JsonSerializer.Serialize<string>(writer, "FOO", options);
                    return;
                case EnumVariantCollisions.Foo0:
                    JsonSerializer.Serialize<string>(writer, "Foo", options);
                    return;
                case EnumVariantCollisions.Foo1:
                    JsonSerializer.Serialize<string>(writer, "foo", options);
                    return;
            }
        }
    }
}
