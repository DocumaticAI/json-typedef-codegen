// Code generated by jetted for C# + System.Text.Json v0.1.0

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JettedE2E
{
    [JsonConverter(typeof(EmptyAndNonasciiEnumValuesJsonConverter))]
    public enum EmptyAndNonasciiEnumValues
    {
        DefaultName,

        Foo,

        Foo0,

        Foo1,

        FooBar,

        FooBar0,

        Foo0bar,

        FooBar1,
    }
    public class EmptyAndNonasciiEnumValuesJsonConverter : JsonConverter<EmptyAndNonasciiEnumValues>
    {
        public override EmptyAndNonasciiEnumValues Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "":
                    return EmptyAndNonasciiEnumValues.DefaultName;
                case "$foo":
                    return EmptyAndNonasciiEnumValues.Foo;
                case "0foo":
                    return EmptyAndNonasciiEnumValues.Foo0;
                case "_foo":
                    return EmptyAndNonasciiEnumValues.Foo1;
                case "foo\nbar":
                    return EmptyAndNonasciiEnumValues.FooBar;
                case "foo bar":
                    return EmptyAndNonasciiEnumValues.FooBar0;
                case "foo0bar":
                    return EmptyAndNonasciiEnumValues.Foo0bar;
                case "foo﷽bar":
                    return EmptyAndNonasciiEnumValues.FooBar1;
                default:
                    throw new ArgumentException(String.Format("Bad EmptyAndNonasciiEnumValues value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, EmptyAndNonasciiEnumValues value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case EmptyAndNonasciiEnumValues.DefaultName:
                    JsonSerializer.Serialize<string>(writer, "", options);
                    return;
                case EmptyAndNonasciiEnumValues.Foo:
                    JsonSerializer.Serialize<string>(writer, "$foo", options);
                    return;
                case EmptyAndNonasciiEnumValues.Foo0:
                    JsonSerializer.Serialize<string>(writer, "0foo", options);
                    return;
                case EmptyAndNonasciiEnumValues.Foo1:
                    JsonSerializer.Serialize<string>(writer, "_foo", options);
                    return;
                case EmptyAndNonasciiEnumValues.FooBar:
                    JsonSerializer.Serialize<string>(writer, "foo\nbar", options);
                    return;
                case EmptyAndNonasciiEnumValues.FooBar0:
                    JsonSerializer.Serialize<string>(writer, "foo bar", options);
                    return;
                case EmptyAndNonasciiEnumValues.Foo0bar:
                    JsonSerializer.Serialize<string>(writer, "foo0bar", options);
                    return;
                case EmptyAndNonasciiEnumValues.FooBar1:
                    JsonSerializer.Serialize<string>(writer, "foo﷽bar", options);
                    return;
            }
        }
    }
}
